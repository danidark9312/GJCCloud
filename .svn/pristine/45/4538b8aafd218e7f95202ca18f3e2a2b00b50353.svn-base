package com.gja.gestionCasos.maestros.controller;

import java.security.Principal;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.HandlerMapping;

import com.gja.gestionCasos.actividades.entities.Actividad;
import com.gja.gestionCasos.actividades.entities.ActividadTipoCaso;
import com.gja.gestionCasos.filters.TipoCasoFiltro;
import com.gja.gestionCasos.maestros.entities.TipoCaso;
import com.gja.gestionCasos.maestros.service.MaestroActividadesService;
import com.gja.gestionCasos.maestros.service.TipoCasoService;
import com.gja.gestionCasos.permisos.service.AccionesService;
import com.gja.gestionCasos.permisos.service.VistaRolesAccionOpciones;
import com.sf.roles.MenuVistaPermisosRolesWrapper;
import com.sf.roles.VistaPermisosRolesWrapper;
import com.sf.util.BusinessException;
import com.sf.util.DAOException;

@Controller
@RequestMapping(value = { "/maestroTipoCaso" })
public class MaestroTipoCasoController {

	private static final Logger LOG = Logger.getLogger(MaestroTipoCasoController.class);
	private final String estadoExito = "SUCCESS";
	private final String estadoError = "ERROR";
	@Autowired
	AccionesService accionesService;
	@Autowired
	MaestroActividadesService maestroActividadService;
	@Autowired
	TipoCasoService tipoCasoService;
	@Autowired
	VistaRolesAccionOpciones vistaRolesAccionOpciones;

	@RequestMapping()
	public String getCreateForm(Model model, Locale loc, HttpServletRequest httpRequest, Principal principal) {
		try {
			List<Actividad> actividades = maestroActividadService.obtenerActividades();
			MenuVistaPermisosRolesWrapper menuVistaPermisosRolesWrapper = new MenuVistaPermisosRolesWrapper();
			VistaPermisosRolesWrapper vistaPermisosRolesWrapper = new VistaPermisosRolesWrapper();

			menuVistaPermisosRolesWrapper = vistaRolesAccionOpciones.getMenuAutorizaciones(principal);
			vistaPermisosRolesWrapper = vistaRolesAccionOpciones.getAutorizaciones(
					httpRequest.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE).toString(), principal);

			model.addAttribute("menuPermisos", menuVistaPermisosRolesWrapper);
			model.addAttribute("actividades", actividades);
			model.addAttribute("permisos", vistaPermisosRolesWrapper);
		} catch (BusinessException e) {
			LOG.error(
					"BusinessException: Ocurrio un error consultando las Actividades. El error es: " + e.getMessage());
			e.printStackTrace();
		} catch (DAOException e) {
			LOG.error("DAOException: Ocurrio un error consultando las Actividades. El error es: " + e.getMessage());
			e.printStackTrace();
		}

		return "maestros/maestroTipoCaso";
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/consultarTipoCaso", method = RequestMethod.POST, produces = "application/json; charset=utf-8", consumes = "application/x-www-form-urlencoded; charset=UTF-8")
	public @ResponseBody String consultarActividad(@ModelAttribute("tipoCaso") TipoCaso tipoCaso) {
		JSONObject res = new JSONObject();
		try {
			tipoCaso = tipoCasoService.findByPK(tipoCaso);
			JSONObject jsO = new JSONObject();

			res.put("codigo", tipoCaso.getCodigo());
			res.put("nombre", tipoCaso.getNombre());
			res.put("activo", tipoCaso.getActivo());

			JSONArray arrayActividades = new JSONArray();
			for (ActividadTipoCaso actividad : tipoCaso.getActividadTipoCasoList()) {
				jsO = new JSONObject();
				jsO.put("cdactividadtipocaso", actividad.getCdactividadtipocaso());
				jsO.put("cdactividad", actividad.getCdactividad().getCdactividad());
				arrayActividades.add(jsO);

			}

			res.put("actividadTipoCasoList", arrayActividades);

		} catch (DAOException e) {
			res = new JSONObject();
			LOG.error("DAOException: Ocurrio un error consultando la Actividad . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		} catch (BusinessException e) {
			res = new JSONObject();
			LOG.error("BusinessException: Ocurrio un error consultando la  Actividad . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		}
		return res.toString();
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/eliminarTipoCaso", method = RequestMethod.POST, produces = "application/json; charset=utf-8", consumes = "application/x-www-form-urlencoded; charset=UTF-8")
	public @ResponseBody String eliminarTipoCaso(@ModelAttribute("tipoCaso") TipoCaso tipoCaso) {
		JSONObject res = new JSONObject();
		int retunValor = 0;
		try {
			retunValor = tipoCasoService.eliminarTipoCaso(tipoCaso);
			if (retunValor == 1) {
				res.put("STATUS", estadoExito);
			} else {
				res.put("STATUS", estadoError);
			}
		} catch (DAOException e) {
			res = new JSONObject();
			LOG.error("DAOException: Ocurrio un error eliminando la Actividad . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		} catch (BusinessException e) {
			res = new JSONObject();
			LOG.error("BusinessException: Ocurrio un error eliminando la  Actividad . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		}
		return res.toJSONString();
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/obtenerActividades", method = RequestMethod.GET, produces = "aplication/json; charset=utf-8")
	public @ResponseBody String obtenerActividades() {
		List<Actividad> actividades = null;
		JSONObject res = new JSONObject();
		try {
			JSONObject jsO = new JSONObject();
			actividades = maestroActividadService.obtenerActividades();
			JSONArray arrayActividades = new JSONArray();
			for (Actividad actividad : actividades) {
				jsO = new JSONObject();
				if (actividad.getIsactivo().equals("S")) {
					jsO.put("codigo", actividad.getCdactividad());
					jsO.put("nombre", actividad.getDsactividad());
					arrayActividades.add(jsO);
				}
			}

			res.put("actividad", arrayActividades);
			res.put("STATUS", estadoExito);
		} catch (DAOException e) {
			res = new JSONObject();
			LOG.error("DAOException: Ocurrio un error consultando las Actividades . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		} catch (BusinessException e) {
			res = new JSONObject();
			LOG.error(
					"BusinessException: Ocurrio un error consultando las Actividades . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		}
		return res.toJSONString();
	}

	@SuppressWarnings("unchecked")
	@RequestMapping("/guardarTipoCaso")
	public @ResponseBody String guardar(@ModelAttribute("tipoCaso") TipoCaso tipoCaso) throws Exception {
		JSONObject res = new JSONObject();
		try {
			tipoCaso = tipoCasoService.guardarTipoCaso(tipoCaso);

			res.put("STATUS", estadoExito);
		} catch (DAOException e) {
			LOG.error("DAOException: Ocurrio un error guardando las Actividades . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		} catch (BusinessException e) {
			LOG.error("BusinessException: Ocurrio un error guardando las Actividades . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		}
		return res.toString();
	}

	@SuppressWarnings("unchecked")
	@RequestMapping("/canIsDeleteActividad")
	public @ResponseBody String guardar(@ModelAttribute("actividadTipoCaso") ActividadTipoCaso actividadTipoCaso)
			throws Exception {
		JSONObject res = new JSONObject();
		try {
			Long cantidad = tipoCasoService.getCountByActividad(actividadTipoCaso);
			if (cantidad.intValue() == 0) {
				res.put("STATUS", estadoExito);
			} else {
				res.put("STATUS", estadoError);
			}

		} catch (DAOException e) {
			LOG.error("DAOException: Ocurrio un error guardando las Actividades . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		} catch (BusinessException e) {
			LOG.error("BusinessException: Ocurrio un error guardando las Actividades . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		}
		return res.toString();
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/mostrarTiposCasos", method = RequestMethod.POST, produces = "application/json; charset=utf-8", consumes = "application/x-www-form-urlencoded; charset=UTF-8")
	public @ResponseBody String getAllTable(TipoCasoFiltro filtro, @RequestParam("activo") String activo,
			@RequestParam("iDisplayStart") int displayStart, @RequestParam("iDisplayLength") int displayLength,
			@RequestParam("sSearch") String sSearch, @RequestParam("iSortCol_0") int sortColumn0,
			@RequestParam("sSortDir_0") String sortDirection0, @RequestParam("sEcho") int sEcho) {
		int cantidad = 0;
		List<TipoCaso> tiposCasos = null;
		JSONObject res = new JSONObject();
		try {
			cantidad = tipoCasoService.getCountFilter(filtro).intValue();
			tiposCasos = tipoCasoService.getTipoCasoByFilter(filtro);
			res =tipoCasoService.getJsonMostrarTiposCasos(tiposCasos, sEcho, cantidad);
		} catch (DAOException e) {
			res = new JSONObject();
			LOG.error("DAOException: Ocurrio un error consultando los tipos de casos . El error es: " + e.getMessage());
			res.put("STATUS", estadoError);
		} catch (BusinessException e) {
			res = new JSONObject();
			LOG.error("BusinessException: Ocurrio un error consultando los tipos de casos . El error es: "
					+ e.getMessage());
			res.put("STATUS", estadoError);
		}
		return res.toJSONString();
	}

	@SuppressWarnings("unchecked")
	@RequestMapping("/existNameTipoCaso")
	public @ResponseBody String existNameTipoCaso(@ModelAttribute("tipoCaso") TipoCaso tipoCaso) throws Exception {
		JSONObject res = new JSONObject();
		try {
			boolean existe = tipoCasoService.existNameTipoCaso(tipoCaso);
			if (existe) {
				res.put("STATUS", estadoExito);
			} else {
				res.put("STATUS", estadoError);
			}

		} catch (DAOException e) {
			LOG.error("DAOException: Ocurrio un error consultando el tipo de caso por nombre . El error es: "
					+ e.getMessage());
			res.put("STATUS", estadoError);
		} catch (BusinessException e) {
			LOG.error("BusinessException: Ocurrio un error consultando el tipo de caso por nombre . El error es: "
					+ e.getMessage());
			res.put("STATUS", estadoError);
		}
		return res.toString();
	}
}
